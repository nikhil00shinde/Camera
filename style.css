*{
  box-sizing: border-box;
}
body{
  margin: 0;
}
.video-container{
  overflow: hidden;
  /* Why do we do OVERFLOW HIDDEN ?  because the main concept we have used is digital zoom which nothing but streches the imagge or video. */
  /* Basically, jo hmara video-container hain usko humne 100vh height & 100vw width di hain screen ke barabar. Jab Hum zoom karenge toh hum video tag ko bada karenge toh hmra video-container mei lgega ki humne zoom kiya but hum sirf strech kar rahe hain video tag and overflow hidden se voh image/video crop ho jaegi*/
  height: 100vh;
  width: 100vw;
  background: black;
}
video{
  height: 100%;
  width: 100%;
}
button{
  position: fixed;
  right: 2rem;
  border-radius: 50%;
  height: 5rem;
  width: 5rem;
  border: 8px solid white;
  background: black;
  z-index: 3;
}
#record{
  top: 40vh;
}
#capture{
    top: 60vh;
}

button span{
  display: inline-block;
  height: 60%;
  width: 70%;
  border-radius: 50%;
}
#record span{
  background-color: red;
}

#capture span{
  background-color: white;
}

.filters{
  position: fixed;
  top: 20vh;
  left: 2rem;
  border: 1px solid;
  height: 20rem;
  width: 5rem;
  display: flex;
  flex-direction: column;
  z-index: 3;
}
.filter{
  /* it will do height, on ratio of parent value and flex-grow value */
  flex-grow: 1;
  /* In direction of flex, flex grow tells how much space will a child occupy that of a parent*/
  border: 1px solid;
  background-image: url(https://images-na.ssl-images-amazon.com/images/I/91wcUPNHFEL.png);
  background-size: cover;
  /* we want image to be cover or contain */
  /* -> cover -> take the whole box */
  /* contain -> whole image should be shown in  box */


  /* to show background color on the image */
  /* mix the color and image */
  background-blend-mode: color-burn;
}

.zoom{
  position: fixed;
  top: 12vh;
  right: 2.5rem;
  border: 1px solid;
  height: 8rem;
  width: 4rem;
  display: flex;
  flex-direction: column;
  z-index: 3;
}
.zoom div{
  flex-grow: 1;
  background: #332e2e;
  font-size: 3rem;
  color: white;
  text-align: center;
}

.capture-animation{
  animation: shrinkDownUp;
  animation-duration: 1s;
}

.record-animation
{
  animation: shrinkDownUp;
  animation-duration: 1s;
  animation-iteration-count: infinite;
}


.filter-div{
  height: 100vh;
  width: 100vw;
  position: fixed;
  top: 0;
  z-index: 1;
}


@keyframes shrinkDownUp{
    0%{
         transform: scale(1);
    }
    50%{
      transform: scale(0.7);
    }
    100%{
      transform: scale(1);
    }

}